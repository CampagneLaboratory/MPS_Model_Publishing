package org.campagnelab.circles.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.prefs.BasePrefsPage;
import javax.swing.JComponent;
import javax.swing.Icon;
import com.intellij.openapi.project.Project;
import jetbrains.mps.plugins.prefs.BaseProjectPrefsComponent;
import com.intellij.openapi.options.ConfigurationException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class PublisherConnection_Publisher_PreferencesPage extends BasePrefsPage {
  private JComponent myComponent;
  private Icon icon;
  public PublisherConnection_Publisher_PreferencesPage(Project project, BaseProjectPrefsComponent prefsComponent) {
    super(project, prefsComponent);
  }
  public String getDisplayName() {
    return "Publisher";
  }
  public Icon getIcon() {
    return this.icon;
  }
  public boolean isModified() {
    return this.isModified(this.getProject(), this.myComponent);
  }
  public void apply() throws ConfigurationException {
    if (this.myComponent != null) {
      this.commit(this.getProject(), this.myComponent);
    }
  }
  private void commit(Project project, JComponent component) {
    String url = as_ah2ydb_a0a0a0h(((JComponent) component), PublisherPageComponent.class).getURL();
    // publisher://username:pwd@hostname:port 
    Pattern pattern = Pattern.compile("^publish://(.+?):(.+?)@(.+?):(\\d+)$");
    Matcher matcher = pattern.matcher(url);
    if (matcher.find()) {
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().username = matcher.group(1);
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().password = matcher.group(2);
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().hostname = matcher.group(3);
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().port = Integer.valueOf(matcher.group(4));
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().url = url;
    }
  }
  public JComponent createComponent() {
    if (this.myComponent == null) {
      this.myComponent = PublisherPageComponent.create();
    }
    return this.myComponent;
  }
  private boolean isModified(Project project, JComponent component) {
    String url = as_ah2ydb_a0a0a0j(((JComponent) component), PublisherPageComponent.class).getURL();
    // publisher://username:pwd@hostname:port 
    Pattern pattern = Pattern.compile("^publish://(.+?):(.+?)@(.+?):(\\d+)$");
    Matcher matcher = pattern.matcher(url);
    if (!(matcher.find())) {
      return false;
    }
    String lusername = matcher.group(1);
    String lpassword = matcher.group(2);
    String lhostname = matcher.group(3);
    int lport = Integer.valueOf(matcher.group(4));


    if (!(lhostname.equals(((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().hostname))) {
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().hostname = lhostname;
      return true;
    }
    if (!(lusername.equals(((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().username))) {
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().username = lusername;
      return true;
    }
    if (lport != ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().port) {
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().port = lport;
      return true;
    }
    if (!(lpassword.equals(((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().password))) {
      ((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().password = lpassword;
      return true;
    }
    return false;
  }
  public void disposeUIResources() {
    this.myComponent = null;
  }
  public void reset() {
    if (this.myComponent != null) {
      this.reset(this.getProject(), this.myComponent);
    }
  }
  private void reset(Project project, JComponent component) {
    as_ah2ydb_a0a0a21(((JComponent) component), PublisherPageComponent.class).setURL(((PublisherConnection_PreferencesComponent) PublisherConnection_Publisher_PreferencesPage.this.getPrefsComponent()).getStateObject().url);
  }
  @Override
  public String getHelpTopic() {
    return "Connection information";
  }
  private static <T> T as_ah2ydb_a0a0a0h(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_ah2ydb_a0a0a0j(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_ah2ydb_a0a0a21(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
